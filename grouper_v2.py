import numpy 
import json

#string ID
#string Name
#string preference
# 1d array diet 6l
# 1d array allergy 10 length
#array of stringsexclusions
 
class Group:
    groupPref
    groupDiet
    groupAllergies
    groupExclusions
    groupMembersID
    groupMembersName
    
    '''
    Initializes the init for the group class that is generated by grouper
    '''
    def __init__(self, groupPref, groupDiet, groupAllergies, groupExclusions, groupMembersID, groupMembersName):
        self.groupPref = groupPref
        self.groupDiet = groupDiet
        self.groupAllergies = groupAllergies
        self.groupExclusions = groupExclusions
        self.groupMembersID = groupMembersID
        self.groupMembersName = groupMembersName
    
    '''
    Returns the list of preferences for a group
    '''
    def getPref(self):
        return self.groupPref
    
    '''
    Returns the List of diets the group adheres to
    '''
    def getDiet(self):
        return self.groupDiet
    
    '''
    Returns the list of allergies group members adhere to
    '''
    def getAllergies(self):
        return self.groupAllergies
    
    '''
    Returns the list of food exclusions for the group
    '''
    def getExlusions(self):
        return self.groupExclusions
    
    '''
    Returns the list of facebook IDs for the group
    '''
    def getIDs(self):
        return self.groupMembersID
    
    '''
    Returns the List of names for the group
    '''
    def getNames(self):
        return self.groupMembersName
 
'''
    Algorithm that will create groups for the correct yummly call
    
    RETURNS: a list of group objects along with all restrictions the entire
            group must adhere to
'''
def grouper(guestArray):
    #the optimal size of a group, this may differ between 3-5 at 6
    #   we hope two groups of 3 would be created as opposed to a group of 
    #   2 and a group of 4
    OPTIMAL_SIZE = 4
    
    # determine the number of guests 
    numberOfGuests = guestArray.shape[1]
    dietAndAllergies = numpy.zeros([numberOfGuests, 16])
    for i, guest in ennumerate(guestArray): 
        dietAndAllergies[i,:] = numpy.hstack((guest.diet,guest.allergy))
    dietAllergiesSum = numpy.sum(dietAndAllergies,1)
    print 'dimensions of sum array: ', dietAllergiesSum.shape
    
    
    
    return 
    
    
    
     
if __name__ == '__main__':
    
    