import numpy 
import json
from guest import *

#string ID
#string Name
#string preference
# 1d array diet 6l
# 1d array allergy 10 length
#array of stringsexclusions
 
class Group:
    preferences = numpy.asarray( ['Beef','Chicken','Plant based','Pork','Seafood'] )
    
    diets = numpy.asarray( ['Pescetarian','Lacto-ovo vegetarian', 'Lacto vegetarian', 'Ovo vegetaian', 'Vegan', 'Paleo'] )
    
    allergy = numpy.asarray( ['Sesame-Free','Seafood-Free','Tree Nut-Free', \
							'Peanut-Free', 'Egg-Free', 'Soy-Free', 'Gluten-Free', \
									'Wheat-Free', 'Dairy-Free', 'Sulfite-Free'] )

    #Initializes the init for the group class that is generated by grouper
    def __init__(self, guests):
        self._guests = guests
        
        self._groupMembersName = self.condenseNames()
        self._groupMembersID = self.condenseIDs()
        self._groupPref = self.condensePrefs()
        self._groupDiet = self.condenseDiet()
        self._groupAllergies = self.condenseAllergies()
        self._groupExclusions = self.condenseExclusions()

    ##########################
    def condenseIDs(self):
        IDs = ''
        for g in range( len(self._guests) ):
            IDs = self._guests[g].ID + ' ' + IDs
        return IDs
    
    def condenseNames(self):
        names = ''
        for g in range( len(self._guests)):
            names = self._guests[g].name + ', ' + names
        return names
    
    def condensePrefs(self):
        pref_ar = numpy.zeros([5])
        pref = []
        for i in range( len(self._guests) ): 
            pref_ar = pref_ar + self._guests[i].pref
        
        for d in range(len(pref_ar)):
			if pref_ar[d] >= 1:
				pref.append( self.preferences[d] )
        
        return pref
    
    def condenseAllergies(self):
        allergy_ar = numpy.zeros([10])
        allergy = []
        for i in range( len(self._guests) ): 
            allergy_ar = allergy_ar + self._guests[i].allergy
        
        for d in range(len(allergy_ar)):
			if allergy_ar[d] >= 1:
				allergy.append( self.allergy[d] )
        
        return allergy
        
    def condenseDiet(self):
        diet_ar = numpy.zeros([6])
        diet = []
        for i in range( len(self._guests) ): 
            diet_ar = diet_ar + self._guests[i].diet
            
        for d in range(len(diet_ar)):
			if diet_ar[d] >= 1:
				diet.append( self.diets[d] )
				
        return diet
        
    def condenseExclusions(self):
        exclude = []
        for g in range( len(self._guests) ):
            for i in range( len( self._guests[g].exclude)):
                exclude.append( self._guests[g].exclude[i] )
        return exclude
    
    ##########################
    #Returns the list of preferences for a group
    @property
    def pref(self):
        return self._groupPref
        
    @pref.setter
    def pref(self, pref):
        self._groupPref = pref
        
    @pref.deleter
    def pref(self):
        del self.groupPref
        
    ##########################
    #Returns the List of diets the group adheres to
    @property
    def diet(self):
        return self._groupDiet
    
    @diet.setter
    def diet(self, diet):
        self._groupdiet = diet
        
    @diet.deleter
    def diet(self):
        del self.groupDiet
        
    ##########################
    #Returns the list of allergies group members adhere to
    @property
    def allergies(self):
        return self._groupAllergies
        
    @allergies.setter
    def allergies(self, allergies):
        self._groupAllergies = allergies
        
    @allergies.deleter
    def allergies(self):
        del self.groupAllergies
        
    ##########################
    #Returns the list of food exclusions for the group
    @property
    def exclusions(self):
        return self._groupExclusions
        
    @exclusions.setter
    def exclustions(self, exclusions):
        self._groupExclusions = exclusions
        
    @exclusions.deleter
    def exclusions(self):
        del self.exclusions

    ##########################
    #Returns the list of facebook IDs for the group
    @property
    def IDs(self):
        return self._groupMembersID
        
    @IDs.setter
    def IDs(self, ids):
        self._groupMembersID = ids
        
    @IDs.deleter
    def IDs(self):
        del self.groupMembersID
    
    ##########################
    #Returns the List of names for the group
    @property
    def names(self):
        return self._groupMembersName
        
    @names.setter
    def names(self, names):
        self._groupMembersName = names
        
    @names.deleter
    def names(self):
        del self.groupMembersName
        
if __name__ == '__main__':
    # beef, chicken, plant based, pork, seafood
	vic_pref = numpy.asarray([0,0,1,0,0])
	john_pref = numpy.asarray([0,0,0,1,0])
	victoria_pref = numpy.asarray([0,1,0,0,0])
	danny_pref = numpy.asarray([1,0,0,0,0])
	
	# pescetarian, vegetarian, laco vegetarian, ovo vegetarian, vegan, paleo
	vic_diet = numpy.asarray( [0,0,0,0,1,0] )
	john_diet = numpy.asarray( [0,0,0,0,0,0] )
	victoria_diet = numpy.asarray( [0,0,0,0,0,0] )
	danny_diet = numpy.asarray( [0,0,0,0,0,0] )

	# sesame, seafood, treenut, peanut, egg, soy, gluten, wheat, dairy, sulfite 
	vic_allergy = numpy.asarray( [0,0,0,0,0,0,0,0,1,0] )
	john_allergy = numpy.asarray( [0,0,1,1,0,1,0,0,1,0] )
	victoria_allergy = numpy.asarray( [0,0,0,0,0,0,0,0,0,0] )
	danny_allergy = numpy.asarray( [0,0,0,0,0,0,0,1,0,0] )

	vic_exclude = numpy.asarray( ['Celery'] )
	john_exclude = numpy.asarray( ['Beef', 'Oatmeal'] )
	victoria_exclude = numpy.asarray( [] )
	danny_exclude = numpy.asarray( ['Tomato'] )

	vic = Guest( '9999', 'Vic', vic_pref, vic_diet, vic_allergy, vic_exclude )
	john = Guest( '8675', 'John', john_pref, john_diet, john_allergy, john_exclude)
	victoria = Guest( '1234', 'Victoria', victoria_pref, victoria_diet, victoria_allergy, victoria_exclude )
	danny = Guest( '8881', 'Danny', danny_pref, danny_diet, danny_allergy, danny_exclude )
	
	g = Group([vic, john, victoria, danny])
	print g.names
	print g.IDs
	print g.pref
	print g.allergies
	print g.diet
	print g.exclusions
	